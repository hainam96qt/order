// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0

package db

import (
	"database/sql"
	"fmt"
)

type OrdersStatus string

const (
	OrdersStatusPending  OrdersStatus = "pending"
	OrdersStatusAccepted OrdersStatus = "accepted"
)

func (e *OrdersStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrdersStatus(s)
	case string:
		*e = OrdersStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrdersStatus: %T", src)
	}
	return nil
}

type Order struct {
	ID                         int32        `json:"id"`
	DeliverySourceAddress      string       `json:"delivery_source_address"`
	DeliveryDestinationAddress string       `json:"delivery_destination_address"`
	BuyerID                    int32        `json:"buyer_id"`
	SellerID                   int32        `json:"seller_id"`
	CreatedAt                  sql.NullTime `json:"created_at"`
	UpdatedAt                  sql.NullTime `json:"updated_at"`
	Status                     OrdersStatus `json:"status"`
	TotalPrice                 int64        `json:"total_price"`
}

type OrderProduct struct {
	ID        int32 `json:"id"`
	OrderID   int32 `json:"order_id"`
	ProductID int32 `json:"product_id"`
	Quantity  int32 `json:"quantity"`
}

type Product struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Price       int64          `json:"price"`
	SellerID    int32          `json:"seller_id"`
}

type User struct {
	ID         int32  `json:"id"`
	Email      string `json:"email"`
	Password   string `json:"password"`
	Name       string `json:"name"`
	Address    string `json:"address"`
	UserRoleID int32  `json:"user_role_id"`
}

type UserRole struct {
	ID       int32          `json:"id"`
	RoleName sql.NullString `json:"role_name"`
}
