// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createOrder = `-- name: CreateOrder :execresult
INSERT INTO orders (
    id ,
    delivery_source_address,
    delivery_destination_address,
    buyer_id,
    seller_id,
    status,
    total_price
) VALUES (
    ?,?,?,?,?,?,?
)
`

type CreateOrderParams struct {
	ID                         int32        `json:"id"`
	DeliverySourceAddress      string       `json:"delivery_source_address"`
	DeliveryDestinationAddress string       `json:"delivery_destination_address"`
	BuyerID                    int32        `json:"buyer_id"`
	SellerID                   int32        `json:"seller_id"`
	Status                     OrdersStatus `json:"status"`
	TotalPrice                 int64        `json:"total_price"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createOrder,
		arg.ID,
		arg.DeliverySourceAddress,
		arg.DeliveryDestinationAddress,
		arg.BuyerID,
		arg.SellerID,
		arg.Status,
		arg.TotalPrice,
	)
}

const createOrderProduct = `-- name: CreateOrderProduct :execresult
INSERT INTO order_product (
    id,
    order_id,
    product_id,
    quantity
) VALUES (
    ?,?,?,?
)
`

type CreateOrderProductParams struct {
	ID        int32 `json:"id"`
	OrderID   int32 `json:"order_id"`
	ProductID int32 `json:"product_id"`
	Quantity  int32 `json:"quantity"`
}

func (q *Queries) CreateOrderProduct(ctx context.Context, arg CreateOrderProductParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createOrderProduct,
		arg.ID,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
	)
}

const createProduct = `-- name: CreateProduct :execresult
INSERT INTO products (
    id,
    name,
    Description,
    price,
    seller_id
) VALUES (
    ?,?,?,?,?
)
`

type CreateProductParams struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Price       int64          `json:"price"`
	SellerID    int32          `json:"seller_id"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.SellerID,
	)
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
    id,
    email,
    password,
    name,
    address,
    user_role_id
) VALUES (
    ?,?,?,?,?,?
)
`

type CreateUserParams struct {
	ID         int32  `json:"id"`
	Email      string `json:"email"`
	Password   string `json:"password"`
	Name       string `json:"name"`
	Address    string `json:"address"`
	UserRoleID int32  `json:"user_role_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.Name,
		arg.Address,
		arg.UserRoleID,
	)
}

const getNewestProduct = `-- name: GetNewestProduct :one
SELECT id, name, description, price, seller_id FROM products where seller_id = ? and name = ? and Price = ? order by id desc
`

type GetNewestProductParams struct {
	SellerID int32  `json:"seller_id"`
	Name     string `json:"name"`
	Price    int64  `json:"price"`
}

func (q *Queries) GetNewestProduct(ctx context.Context, arg GetNewestProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, getNewestProduct, arg.SellerID, arg.Name, arg.Price)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.SellerID,
	)
	return i, err
}

const getOrderByBuyerID = `-- name: GetOrderByBuyerID :many
SELECT id, delivery_source_address, delivery_destination_address, buyer_id, seller_id, created_at, updated_at, status, total_price FROM orders WHERE buyer_id = ? LIMIT ? offset ?
`

type GetOrderByBuyerIDParams struct {
	BuyerID int32 `json:"buyer_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) GetOrderByBuyerID(ctx context.Context, arg GetOrderByBuyerIDParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrderByBuyerID, arg.BuyerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.DeliverySourceAddress,
			&i.DeliveryDestinationAddress,
			&i.BuyerID,
			&i.SellerID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.TotalPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, delivery_source_address, delivery_destination_address, buyer_id, seller_id, created_at, updated_at, status, total_price FROM orders WHERE id = ?
`

func (q *Queries) GetOrderByID(ctx context.Context, id int32) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.DeliverySourceAddress,
		&i.DeliveryDestinationAddress,
		&i.BuyerID,
		&i.SellerID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.TotalPrice,
	)
	return i, err
}

const getOrderBySellerID = `-- name: GetOrderBySellerID :many
SELECT id, delivery_source_address, delivery_destination_address, buyer_id, seller_id, created_at, updated_at, status, total_price FROM orders WHERE seller_id = ? LIMIT ? offset ?
`

type GetOrderBySellerIDParams struct {
	SellerID int32 `json:"seller_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) GetOrderBySellerID(ctx context.Context, arg GetOrderBySellerIDParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrderBySellerID, arg.SellerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.DeliverySourceAddress,
			&i.DeliveryDestinationAddress,
			&i.BuyerID,
			&i.SellerID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.TotalPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, description, price, seller_id FROM products WHERE id = ?
`

func (q *Queries) GetProductByID(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.SellerID,
	)
	return i, err
}

const getProductBySeller = `-- name: GetProductBySeller :many
SELECT id, name, description, price, seller_id FROM products where seller_id = ? LIMIT ? OFFSET ?
`

type GetProductBySellerParams struct {
	SellerID int32 `json:"seller_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) GetProductBySeller(ctx context.Context, arg GetProductBySellerParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductBySeller, arg.SellerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.SellerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT id, role_name FROM user_role where id = ? LIMIT 1
`

func (q *Queries) GetRoleByID(ctx context.Context, id int32) (UserRole, error) {
	row := q.db.QueryRowContext(ctx, getRoleByID, id)
	var i UserRole
	err := row.Scan(&i.ID, &i.RoleName)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, name, address, user_role_id FROM users where email = ? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Address,
		&i.UserRoleID,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password, name, address, user_role_id FROM users where id = ? LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Address,
		&i.UserRoleID,
	)
	return i, err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders set status = 'accepted' where seller_id = ? and id = ?
`

type UpdateOrderStatusParams struct {
	SellerID int32 `json:"seller_id"`
	ID       int32 `json:"id"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus, arg.SellerID, arg.ID)
	return err
}
